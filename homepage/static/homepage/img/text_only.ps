%!PS-Adobe-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.9.3 (Build 13D65) Quartz PS Context)
%%Title: (text_only.pdf)
%%Creator: (Preview: cgpdftops CUPS filter)
%%CreationDate: (Wednesday, May 27 2015 15:05:18 PDT)
%%For: (Drew Terry)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%PageOrder: Ascend
%RBINumCopies: 1
%%Pages: (atend)
%%BoundingBox: (atend)
%%EndComments
userdict/dscInfo 5 dict dup begin
/Title(text_only.pdf)def
/Creator(Preview: cgpdftops CUPS filter)def
/CreationDate(Wednesday, May 27 2015 15:05:18 PDT)def
/For(Drew Terry)def
/Pages 1 def
end put
%%BeginProlog
%%BeginFile: lw8_errorhandler-2.0
/currentpacking where 
	{ pop /oldpack currentpacking def /setpacking where
		{
			pop false setpacking
		}if
	}if
/$brkpage 64 dict def $brkpage begin
/prnt
 {dup type/stringtype ne{=string cvs}if dup length 6 mul/tx exch def/ty 10 def
  currentpoint/toy exch def/tox exch def 1 setgray newpath
  tox toy 2 sub moveto 0 ty rlineto tx 0 rlineto 0 ty neg rlineto
  closepath fill tox toy moveto 0 setgray show}bind def
/nl{currentpoint exch pop lmargin exch moveto 0 -10 rmoveto}def
/=={/cp 0 def typeprint nl}def
/typeprint{dup type exec}readonly def
/lmargin 72 def
/rmargin 72 def
/tprint
   {dup length cp add rmargin gt{nl/cp 0 def}if
    dup length cp add/cp exch def prnt}readonly def
/cvsprint{=string cvs tprint( )tprint}readonly def
/integertype{cvsprint}readonly def
/realtype{cvsprint}readonly def
/booleantype{cvsprint}readonly def
/operatortype{(--)tprint =string cvs tprint(-- )tprint}readonly def
/marktype{pop(-mark- )tprint}readonly def
/dicttype{pop(-dictionary- )tprint}readonly def
/nulltype{pop(-null- )tprint}readonly def
/filetype{pop(-filestream- )tprint}readonly def
/savetype{pop(-savelevel- )tprint}readonly def
/fonttype{pop(-fontid- )tprint}readonly def
/nametype{dup xcheck not{(/)tprint}if cvsprint}readonly def
/stringtype
 {dup rcheck{(\()tprint tprint(\))tprint}{pop(-string- )tprint}ifelse
 }readonly def
/arraytype
 {dup rcheck{dup xcheck
  {({)tprint{typeprint}forall(})tprint}
  {([)tprint{typeprint}forall(])tprint}ifelse}{pop(-array- )tprint}ifelse
 }readonly def
/packedarraytype
 {dup rcheck{dup xcheck
  {({)tprint{typeprint}forall(})tprint}
  {([)tprint{typeprint}forall(])tprint}ifelse}{pop(-packedarray- )tprint}ifelse
 }readonly def
/courier/Courier findfont 10 scalefont def
end %$brkpage
errordict/handleerror
 {systemdict begin $error begin $brkpage begin newerror
   {/newerror false store 
    vmstatus pop pop 0 ne{grestoreall}if initgraphics courier setfont
    lmargin 720 moveto(ERROR: )prnt errorname prnt
    nl(OFFENDING COMMAND: )prnt/command load prnt
 	$error/ostack known{
	$error/ostack get type dup/arraytype eq exch /packedarraytype eq or
   {nl nl(STACK:)prnt nl nl $error/ostack get aload length{==}repeat}if}if
    systemdict/showpage get exec(%%[ Error: )print
    errorname =print(; OffendingCommand: )print/command 
    load =print( ]%%)= flush}if end end end}
dup 0 systemdict put dup 4 $brkpage put bind readonly put
/currentpacking where 
	{ pop  /setpacking where
		{
			pop oldpack setpacking
		}if
	}if
%%EndFile
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
{ld}repeat pop
/SC{	
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		
/cm {cmmtx astore CM concat}bd	
/W{clip newpath}bd
/W*{eoclip newpath}bd
statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	
    true
}{
    pop	
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse
{	
    { 
	{ 
	    pop pop 
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd
/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd
/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd
/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	
dict begin
{def} repeat
pop		
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	
}bd
/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ 
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ 
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		
/cp_proc/x_proc ld 	
/base_charpath		
{
    /t_array xs
    /t_i 0 def
    { 
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ 
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ 
findfont dup length dict copy definefont pop
}bd
L3? dup dup{save exch}if
/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def
/setupFunEval 
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   
		    
	[ 
	    0 1 nRange 1 sub
	    { 
		    2 mul/nDim2 xd		
		    Range nDim2 get		
		    Range nDim2 1 add get	
		    1 index sub			
						
		    255 div			
		    exch			
	    }for
	]store
    end
}bd
/FunEval 
{
    begin
	
	nRange mul /val xd	
				
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd 
	    val	
	    add DataSource exch get 
	    mulRange nDim2 get mul 	
	    mulRange nDim2 1 add get 
	    add 
	}for	
    end
}bd
/max 
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd
/sh2
{	
	/Coords load aload pop 	
	3 index 3 index translate	
					
	3 -1 roll sub	
	3 1 roll exch 	
	sub				
	2 copy
	dup mul exch dup mul add sqrt	
	dup
	scale  
	atan	
	
	rotate		
	
	/Function load setupFunEval	
	
	
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	
	grestore	
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd
/shp	
{	
	4 copy
	
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse
	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
	
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse
	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd
/calcmaxs
{	
	
	xmin dup mul ymin dup mul add sqrt		
	xmax dup mul ymin dup mul add sqrt		
	xmin dup mul ymax dup mul add sqrt		
	xmax dup mul ymax dup mul add sqrt		
	max max max								
}bd
/sh3
{	
	/Coords load aload pop 	
	5 index 5 index translate	
	3 -1 roll 6 -1 roll sub		
	3 -1 roll 5 -1 roll sub		
	2 copy dup mul exch dup mul add sqrt
	/dx xs						
	2 copy 0 ne exch 0 ne or
	{
		
		exch atan rotate	
	}{
		pop pop
	}ifelse
	
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	
	/Nsteps xs		
	setupFunEval		
	
	
	
	
	
	dx r2 add r1 lt{
		
		0 
	}{
		dx r1 add r2 le
		{ 
			1
		}{ 
			r1 r2 eq
			{	
				2
			}{ 
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		
	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	
		{	
			0/Function load FunEval sc	
			
			
			
			
			{ 
				{	
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		
				}
				{	
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	
					
					
				
					
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	
					
				
					r2 r1 gt{	
						
						0 r1
						r1 neg r2 r1 sub div dx mul	
						0	
						shp	
					}{	
						
						
						
						0 r1 calcmaxs	
						dup
						
						r2 add dx mul dx r1 r2 sub sub div
						neg				
						exch 1 index	
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	
		}if
	}if
	
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	
	
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	
		{	
			Nsteps/Function load FunEval sc	
			
			
			
			
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		
				} 
				{	
					
					
					xmax abs r1 add r1 dx r1 shp
				}	
				{	
			
					r2 r1 gt{
						
						
						
						calcmaxs dup	
						
						r1 add dx mul dx r2 r1 sub sub div	
						exch 1 index	
						exch sub
						dx r2
						shp
					}{	
						
						r1 neg r2 r1 sub div dx mul	
						0		
						dx 		
						r2		
						shp
					}ifelse
				}
			}			
			sh3tp get exec	
		}if
	}if
}bd
/sh		
{	
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	
					2 index sub				
					3 index					
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd
{restore}if not dup{save exch}if
	L3?{	
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if
end
setpacking
%%EndFile
%%EndProlog
%%BeginSetup
% Disable CTRL-D as an end-of-file marker...
userdict dup(\004)cvn{}put (\004\004)cvn{}put
[{
%%BeginFeature: *ColorModel RGB
<</cupsColorSpace 1/cupsBitsPerColor 8/cupsColorOrder 0/cupsCompression 0>>setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *Duplex None
<</Duplex false>>setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *MediaType any
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *PageSize Letter
<</PageSize[612.0000 792.0000]/ImagingBBox null>>setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *cupsPrintQuality Normal
<</cupsInteger1 4 /HWResolution[600 600]>>setpagedevice
%%EndFeature
} stopped cleartomark
% x y w h ESPrc - Clip to a rectangle.
userdict/ESPrc/rectclip where{pop/rectclip load}
{{newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
neg 0 rlineto closepath clip newpath}bind}ifelse put
% x y w h ESPrf - Fill a rectangle.
userdict/ESPrf/rectfill where{pop/rectfill load}
{{gsave newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
neg 0 rlineto closepath fill grestore}bind}ifelse put
% x y w h ESPrs - Stroke a rectangle.
userdict/ESPrs/rectstroke where{pop/rectstroke load}
{{gsave newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
neg 0 rlineto closepath stroke grestore}bind}ifelse put
userdict/ESPwl{}bind put
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 612 792
%%BeginPageSetup
%%EndPageSetup
cg_md begin
bp
sdmtx
%%EndPageSetup
0 0 0 0.1 setcmykcolor
T soprm
q
9 345 594 102 rc
538.13409 397.81839 m
539.32739 401.07889 540.01648 403.94351 540.01648 407.57361 c
540.01648 418.3717 l
547.52771 415.8663 l
549.27283 419.0899 551.2951 422.28711 552.72083 424.48099 c
556.28497 429.96979 562.8985 440.4379 570.24072 440.4379 c
571.96997 440.4379 573.51709 440.2901 575.15131 439.6723 c
576.03839 439.33701 576.38422 439.1311 577.33472 438.90399 c
586.70978 436.65991 l
582.73383 428.3725 l
582.24268 425.23871 583.9165 416.29919 585.97052 408.70361 c
590.47198 403.9567 l
595.98187 397.83679 l
596.17462 394.3783 596.05322 390.87219 595.17932 387.50601 c
594.89679 386.4183 594.45062 385.38599 594.1048 384.37219 c
594.99188 382.26541 596.32507 379.8338 597.23859 377.94879 c
598.84637 374.6196 601.78491 368.9776 601.78491 365.3316 c
601.78491 358.71811 596.20367 354.90839 590.04163 354.90839 c
588.72162 354.90839 l
587.15601 354.90839 587.32489 354.89261 585.85968 355.28329 c
579.77679 356.91751 576.88593 362.8974 574.9137 368.315 c
574.91107 368.3176 574.91107 368.32019 574.90839 368.32291 c
573.93951 368.1803 572.84912 368.10641 571.56073 368.10641 c
569.61761 368.10641 567.82233 368.2912 566.14581 368.72421 c
566.14581 362.6915 l
566.14581 354.64969 562.07739 346.98541 553.0799 346.98541 c
551.75983 346.98541 l
545.7984 346.98541 541.24152 349.2876 538.02588 352.9072 c
534.36658 349.77859 529.59332 347.90411 524.32617 347.90411 c
513.20343 347.90411 l
512.60938 355.04041 l
511.2655 371.19009 510.39691 391.49261 505.35959 408.13861 c
503.01251 405.08401 499.6991 402.0267 493.96481 402.0267 c
491.63361 402.0267 489.39209 402.61551 487.36981 403.77451 c
484.95929 405.1579 483.24319 407.0878 481.7753 409.28711 c
479.86649 401.92111 478.4382 390.45239 478.01581 386.72461 c
476.8172 376.14291 476.202 365.6326 475.32019 355.04041 c
474.7262 347.90411 l
463.6033 347.90411 l
457.72379 347.90411 452.10031 350.8056 448.1586 355.19089 c
446.61938 354.60211 444.91919 354.2959 443.17401 354.2959 c
441.854 354.2959 l
440.28839 354.2959 440.45731 354.28 438.9921 354.6734 c
432.90659 356.30499 430.01831 362.28751 428.04349 367.70511 c
428.04349 367.7077 428.0408 367.71039 428.0408 367.71301 c
427.06931 367.5704 425.98151 367.49649 424.69321 367.49649 c
422.74741 367.49649 420.95209 367.67871 419.2756 368.11429 c
419.2756 362.07901 l
419.2756 354.0372 415.20981 346.37549 406.21231 346.37549 c
404.89221 346.37549 l
396.9111 346.37549 391.4487 350.49939 388.3465 356.3895 c
380.98318 350.05579 367.7984 347.9411 359.57971 347.9411 c
345.05899 347.9411 l
339.32199 347.9411 333.94409 348.65921 329.0097 351.79041 c
327.52859 352.73029 l
323.02191 348.80969 317.2796 346.37289 310.9856 346.37289 c
307.02539 346.37289 l
291.56741 346.37289 278.0975 359.35959 276.82761 374.63281 c
275.33069 392.62521 l
290.03351 380.88721 l
289.61111 384.88699 289.06989 388.83139 288.51019 392.4747 c
287.57559 398.59979 286.38751 404.91241 284.6265 410.85791 c
284.1777 412.3681 282.93951 416.2095 281.733 418.42459 c
278.11859 416.4682 271.33881 409.90219 269.11581 408.41321 c
263.40781 404.58759 l
268.96271 394.5499 271.79019 384.8923 271.79019 373.23611 c
271.79019 358.58609 256.86829 346.97479 242.88609 346.97479 c
240.246 346.97479 l
226.4619 346.97479 213.7999 360.5556 212.6884 373.91199 c
211.5162 388.005 l
210.8878 386.51071 210.2674 385.0903 209.6786 383.77289 c
206.31509 376.267 202.3127 368.5314 197.65289 361.74631 c
194.0042 356.43439 188.38341 349.1925 181.27879 349.1925 c
166.8954 349.1925 l
166.8954 394.8324 l
166.6261 397.29559 l
163.9252 382.1571 163.252 363.75809 162.6342 356.33139 c
162.04021 349.1925 l
150.9173 349.1925 l
144.8952 349.1925 139.7549 351.96201 136.2435 356.19681 c
134.3902 355.22781 132.2121 354.7157 129.96001 354.7157 c
128.64 354.7157 l
127.0717 354.7157 127.2407 354.6998 125.7754 355.0932 c
119.6926 356.72479 116.8043 362.70731 114.8295 368.12491 c
114.8268 368.1275 114.8268 368.1301 114.8268 368.13281 c
113.8553 367.9902 112.7675 367.91629 111.4765 367.91629 c
109.5334 367.91629 107.7381 368.09851 106.0616 368.53409 c
106.0616 362.49881 l
106.0616 354.45959 101.9958 346.79529 92.99826 346.79529 c
91.678192 346.79529 l
82.582962 346.79529 76.761482 352.14951 73.968231 359.36761 c
71.454826 355.66351 68.122993 352.63791 63.711342 352.63791 c
51.791168 352.63791 l
51.968048 360.59521 l
52.110619 366.9606 53.80822 370.4455 57.05822 375.62811 c
57.982262 377.09869 58.454842 378.00421 58.549889 379.59091 c
57.48856 381.31491 53.921749 383.93661 50.99913 385.93781 c
48.923988 385.1933 46.904289 384.7128 44.636421 384.48041 c
42.336868 347.29691 l
30.6992 347.3576 l
17.60417 347.3576 9.7260351 358.68109 9.7260351 370.98151 c
9.7260351 373.62161 l
9.7260351 395.0542 28.460369 421.3208 40.082211 438.677 c
43.118351 443.21011 l
62.673771 438.3786 l
60.609192 430.7038 l
58.937988 424.4968 54.932919 419.12949 51.801731 413.59579 c
51.009689 412.1965 50.288929 410.8157 49.65266 409.43231 c
60.39534 414.3139 67.769211 419.66541 69.155281 436.3114 c
70.250931 449.49091 l
81.241768 442.1329 l
87.916008 437.66321 92.451752 432.69971 92.610161 424.24869 c
92.61808 424.2619 92.628639 424.27771 92.639198 424.29089 c
96.200729 429.77969 102.8142 440.24521 110.1564 440.24521 c
111.8857 440.24521 113.4328 440.10001 115.0671 439.48221 c
115.9542 439.14691 116.3 438.93829 117.2505 438.7113 c
126.6255 436.46719 l
122.6495 428.1825 l
122.1585 425.04599 123.8323 416.10919 125.8863 408.51349 c
130.3877 405.0708 l
135.89771 397.6441 l
135.93201 397.04221 135.9557 396.44019 135.96899 395.8356 c
138.5352 402.89801 141.79041 409.69629 144.8002 414.6254 c
146.17039 416.87219 147.4165 419.19809 148.6891 421.50031 c
154.42081 431.86539 160.57491 440.88669 172.9122 443.75919 c
178.15289 444.9816 l
181.1442 440.51181 l
182.8286 437.99841 184.2674 435.33719 185.466 432.56241 c
186.28979 430.65359 186.9894 428.7131 187.58611 426.74619 c
187.74969 429.0484 187.8976 431.11829 188.0428 432.866 c
188.6368 440.00229 l
199.7597 440.00229 l
201.99319 440.00229 204.108 439.6221 206.06171 438.92511 c
206.06171 443.47141 l
221.47211 438.28619 l
221.05231 440.17661 l
234.96581 440.42209 l
238.87579 440.42209 242.3687 438.94101 244.7157 435.74109 c
245.20151 435.07849 245.521 434.48709 245.80881 433.89569 c
267.57129 436.15561 l
273.1922 440.95801 280.5687 443.78299 288.54449 443.78299 c
289.8645 443.78299 l
295.03659 443.78299 299.8812 442.3837 304.07111 439.94949 c
307.0755 437.94299 l
314.0191 432.6601 318.56009 424.30939 318.76599 415.0531 c
319.13031 398.75299 l
318.02151 399.61099 l
321.1236 392.66751 322.67871 386.0777 323.42319 379.08401 c
337.44229 388.72311 l
337.33139 373.7879 l
337.3103 371.24811 336.9274 368.74271 336.22781 366.3428 c
340.32529 366.82059 345.15671 368.0694 348.5625 369.0885 c
350.95441 369.8013 357.61279 372.0639 360.5513 374.09421 c
357.98511 379.0365 346.4794 390.12241 343.71521 392.92361 c
335.98761 400.7515 324.07529 412.6532 324.07529 424.36481 c
324.07529 435.95761 341.08301 440.0683 350.33929 440.0683 c
357.39899 440.0683 l
404.11069 434.53201 l
386.245 422.81241 l
381.4162 419.6416 373.62259 418.216 367.99121 416.76129 c
366.22229 416.30191 360.2767 414.69931 357.73431 413.0889 c
359.3183 411.3913 361.57831 409.3848 362.67661 408.37091 c
366.87701 404.5058 371.1514 400.741 375.27261 396.79141 c
378.78659 393.42261 383.14279 389.11911 386.74661 384.35901 c
386.9024 384.98999 387.0687 385.61829 387.25089 386.2467 c
388.24619 389.70789 389.60849 392.88919 390.89691 396.2316 c
392.31729 399.91199 393.1489 402.9772 393.1489 406.96109 c
394.67761 401.65451 l
400.6601 415.25641 l
402.40259 418.48001 404.42749 421.67719 405.85321 423.87109 c
409.41739 429.35999 416.03091 439.82541 423.37311 439.82541 c
425.0997 439.82541 426.64951 439.68021 428.2811 439.06241 c
429.17081 438.72711 429.51669 438.51859 430.46451 438.2915 c
439.84219 436.04739 l
435.86621 427.7627 l
435.37509 424.62619 437.0463 415.68939 439.10031 408.09369 c
446.8121 411.70541 l
448.1586 387.3555 l
449.35461 390.29141 451.52481 403.66891 452.73129 406.2034 c
457.39899 416.0062 467.31009 433.9274 476.4343 440.03659 c
480.76419 442.93549 l
485.09659 440.03659 l
487.45419 438.45779 489.41061 436.44339 491.20059 434.25739 c
491.79459 433.534 493.09091 431.73871 494.2948 430.22061 c
494.46909 430.53741 494.6301 430.8252 494.7674 431.05759 c
497.87479 436.2428 502.08051 440.034 508.4855 440.034 c
515.3551 440.034 520.48492 432.05289 523.71637 426.88351 c
528.11749 419.83701 531.97198 412.0882 535.3197 404.4873 c
536.19623 402.49399 537.16248 400.2341 538.13409 397.81839 c
h
257.00031 415.21149 m
257.0267 415.5231 l
257.10059 416.39691 257.20621 417.255 257.34879 418.09979 c
255.7541 417.4635 l
256.15009 416.71371 256.56989 415.9613 257.00031 415.21149 c
h
218.48351 409.3689 m
217.2056 402.99829 214.80051 396.08911 212.3848 390.1145 c
225.0468 380.8371 l
228.1226 378.5798 230.10789 375.57001 232.7692 372.95889 c
233.86481 371.8844 234.9895 370.9472 236.4126 370.60129 c
238.12601 373.27841 239.0632 379.99219 239.0632 382.47659 c
239.0632 387.75681 l
239.0632 395.2099 235.78951 402.57321 233.284 409.8389 c
223.8403 409.05209 l
222.0107 408.8541 220.2075 408.95181 218.48351 409.3689 c
h
76.690201 394.11951 m
77.02021 394.95651 77.352867 395.79871 77.682877 396.6514 c
78.155472 397.87909 78.56205 399.03549 78.897339 400.1813 c
77.337029 398.8454 75.626228 397.52271 73.8283 396.3082 c
74.768181 395.66141 75.747673 394.9433 76.690201 394.11951 c
f*
0 0 0 1 setcmykcolor
139.0368 374.13641 m
139.0368 370.17621 l
139.0368 363.50461 143.79691 356.97559 150.9173 356.97559 c
154.8775 356.97559 l
156.70979 378.99689 157.21671 416.5791 171.3414 425.7034 c
174.6785 395.25739 l
174.6785 356.97559 l
181.27879 356.97559 l
190.1839 356.97559 211.6402 400.9628 211.6402 417.69849 c
211.6402 419.01859 l
211.6402 425.69281 206.8775 432.21921 199.7597 432.21921 c
195.7995 432.21921 l
194.03059 410.98471 193.0089 380.83441 182.59891 368.8562 c
182.59891 396.46661 186.1234 419.08719 174.6785 436.17941 c
161.91611 433.2066 157.59689 420.65549 151.4427 410.57281 c
146.81461 402.98511 139.0368 385.3913 139.0368 374.13641 c
f*
450.40271 371.5253 m
450.40271 368.88519 l
450.40271 362.25061 456.96609 355.68719 463.6033 355.68719 c
467.56351 355.68719 l
468.66971 368.99609 471.29669 421.6904 480.76419 421.6904 c
486.61731 421.6904 487.00281 409.80981 493.96481 409.80981 c
500.4437 409.80981 500.6575 419.5994 508.4855 421.6904 c
517.16357 403.6055 518.32788 380.1929 520.36603 355.68719 c
524.32617 355.68719 l
531.74237 355.68719 537.52692 361.47171 537.52692 368.88519 c
537.52692 370.20529 l
537.52692 386.4975 514.99341 432.24829 508.4855 432.24829 c
500.9426 432.24829 500.4859 420.36771 495.28479 420.36771 c
489.70361 420.36771 486.74399 429.56589 480.76419 433.57101 c
470.56271 426.73831 450.40271 389.9798 450.40271 371.5253 c
f*
91.678192 406.06079 m
87.715363 407.38089 l
87.715363 393.37241 79.797623 389.19571 79.797623 371.7392 c
79.797623 370.4191 l
79.797623 362.1239 83.303711 354.5784 91.678192 354.5784 c
92.99826 354.5784 l
97.056129 354.5784 98.278511 358.4462 98.278511 362.49881 c
98.278511 382.29971 l
105.0848 380.48331 103.0703 375.6994 111.4765 375.6994 c
115.5053 375.6994 116.8043 376.96661 119.3995 378.33951 c
121.5195 373.9173 123.6052 362.49881 128.64 362.49881 c
129.96001 362.49881 l
132.1196 362.49881 133.9176 363.2908 133.9176 365.13889 c
133.9176 367.7869 125.9998 381.98019 125.9998 383.61981 c
125.9998 387.0282 128.64 387.9628 128.12781 397.2164 c
124.6798 391.5401 l
120.3315 394.72681 112.5986 425.2229 115.4393 431.142 c
111.8989 431.9895 112.9497 432.4621 110.1564 432.4621 c
106.1434 432.4621 92.800247 410.88431 91.678192 406.06079 c
h
100.9186 395.50031 m
100.8526 391.3844 l
116.2894 385.1062 l
116.9336 386.30481 l
108.8364 419.26151 l
104.1924 415.85831 100.9186 403.66891 100.9186 395.50031 c
f*
38.630138 396.06271 m
39.026161 413.87299 50.47374 423.00519 53.092751 432.72879 c
46.550522 434.34451 l
37.92786 421.47131 17.50913 393.28259 17.50913 373.62161 c
17.50913 370.98151 l
17.50913 362.46179 22.451441 355.14069 30.709761 355.14069 c
35.02108 355.1196 l
37.31007 392.1051 l
41.27026 392.1051 l
46.054169 392.1051 48.636219 393.2113 51.828129 394.74261 c
55.77512 392.10251 66.351463 385.67911 66.351463 380.22189 c
66.351463 371.0871 59.975559 370.50629 59.751148 360.42099 c
63.711342 360.42099 l
67.753372 360.42099 74.269203 377.1066 74.269203 381.54199 c
74.269203 382.86209 l
74.269203 390.2861 63.20443 390.7085 61.071209 398.70279 c
69.49321 400.66711 84.832352 413.61951 84.832352 423.784 c
84.832352 430.14941 80.729591 433.10889 76.911972 435.66721 c
74.580742 407.66339 57.459518 405.09979 38.630138 396.06271 c
f*
264.78329 414.87891 m
268.9838 417.69321 276.5451 426.7594 283.26419 426.7594 c
293.23071 426.7594 299.10501 380.14539 298.60599 364.08279 c
284.58429 375.27701 l
285.46609 364.6637 295.02341 354.15601 307.02539 354.15601 c
310.9856 354.15601 l
320.63519 354.15601 329.4664 363.1113 329.54831 373.84869 c
316.26581 364.71649 l
316.26581 380.10309 314.7847 388.88681 309.6734 399.04871 c
306.88809 404.58499 296.0477 422.05209 295.14481 425.43939 c
295.93951 426.5007 l
310.9856 414.87891 l
310.73209 426.18921 301.5524 435.99991 289.8645 435.99991 c
288.54449 435.99991 l
275.79001 435.99991 265.776 426.8175 264.78329 414.87891 c
f*
331.8584 424.36481 m
331.8584 408.37891 368.82019 385.3226 368.82019 372.88501 c
368.82019 365.42401 342.50339 358.36169 333.1785 358.36169 c
336.27802 356.3974 339.86331 355.72421 345.05899 355.72421 c
359.57971 355.72421 l
369.23199 355.72421 385.98099 359.29099 385.98099 367.6048 c
385.98099 382.49771 349.0192 406.61261 349.0192 412.48431 c
349.0192 424.07181 374.3063 424.28561 381.97589 429.31769 c
356.93961 432.28519 l
350.33929 432.28519 l
343.8551 432.28519 331.8584 429.27551 331.8584 424.36481 c
f*
223.08521 416.79819 m
238.92599 418.11829 l
241.009 409.1788 246.8463 399.04071 246.8463 387.75681 c
246.8463 382.47659 l
246.8463 375.34299 243.8947 362.67831 237.6059 362.67831 c
228.6347 362.67831 224.8699 371.31409 220.4451 374.5589 c
221.2186 365.26031 230.54089 354.7579 240.246 354.7579 c
242.88609 354.7579 l
253.20641 354.7579 264.0072 363.5152 264.0072 373.23611 c
264.0072 397.91339 249.3465 407.76901 245.616 421.79599 c
260.02319 427.5462 l
245.52631 426.04129 l
244.20621 426.04129 l
237.6165 426.04129 241.0117 432.63901 234.96581 432.63901 c
230.7178 432.56509 l
232.0643 426.50861 l
213.8448 432.63901 l
213.8448 424.85849 215.2942 415.89529 223.08521 416.79819 c
f*
404.89221 405.64111 m
400.93201 406.96109 l
400.93201 392.95261 393.0116 388.77591 393.0116 371.3194 c
393.0116 369.99939 l
393.0116 361.7041 396.52039 354.1586 404.89221 354.1586 c
406.21231 354.1586 l
410.27011 354.1586 411.49249 358.0264 411.49249 362.07901 c
411.49249 381.87991 l
418.30139 380.06351 416.28439 375.2796 424.69321 375.2796 c
428.72198 375.2796 430.0209 376.54691 432.61349 377.91971 c
434.73621 373.4975 436.81931 362.07901 441.854 362.07901 c
443.17401 362.07901 l
445.33371 362.07901 447.13419 362.871 447.13419 364.71909 c
447.13419 367.3671 439.21381 381.56049 439.21381 383.20001 c
439.21381 386.6084 441.854 387.543 441.3418 396.7966 c
437.8938 391.12039 l
433.5455 394.30701 425.81259 424.8031 428.65329 430.72229 c
425.11292 431.5697 426.1637 432.0423 423.37311 432.0423 c
419.35751 432.0423 406.01691 410.4646 404.89221 405.64111 c
h
414.1326 395.0806 m
414.06931 390.9646 l
429.50351 384.6864 l
430.14771 385.88501 l
422.05301 418.84171 l
417.4064 415.4386 414.1326 403.24911 414.1326 395.0806 c
f*
551.75983 406.2536 m
547.79962 407.57361 l
547.79962 393.5625 539.87921 389.3858 539.87921 371.93188 c
539.87921 370.61191 l
539.87921 362.3139 543.38788 354.76849 551.75983 354.76849 c
553.0799 354.76849 l
557.1377 354.76849 558.36267 358.63629 558.36267 362.6915 c
558.36267 382.4924 l
565.16901 380.6734 563.1546 375.8895 571.56073 375.8895 c
575.5896 375.8895 576.88849 377.15939 579.48108 378.5296 c
581.60382 374.10999 583.68951 362.6915 588.72162 362.6915 c
590.04163 362.6915 l
592.20392 362.6915 594.00177 363.4809 594.00177 365.3316 c
594.00177 367.97971 586.08142 382.173 586.08142 383.8125 c
586.08142 387.21829 588.72162 388.15289 588.21198 397.40649 c
584.76398 391.73291 l
580.41309 394.9169 572.68011 425.41299 575.52087 431.33481 c
571.98322 432.1796 573.03387 432.65479 570.24072 432.65479 c
566.22772 432.65479 552.88452 411.0744 551.75983 406.2536 c
h
561.00293 395.69312 m
560.93689 391.57449 l
576.37097 385.2962 l
577.01788 386.4975 l
568.92059 419.45419 l
564.27399 416.0484 561.00293 403.85901 561.00293 395.69312 c
f*
ep
end
%%Trailer
%%Pages: 1
%%BoundingBox: 0 0 612 792
%%EOF
